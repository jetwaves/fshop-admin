
// 用于通用鉴权


// 鉴权策略   kv对   URL和正则表达式
// 
var auth_users_by_level = {	allow: 9 , redirect : '/users' };	//   级别 >= 9 的都可以访问，否则跳转到 '/users'
var authStrategy = {
	priv_type 		: 'level', 				//  type : 'level' 	说明数据库里面用0 - 9 区分用户级别
											//  type : 'role'	说明数据库里面是用角色区分用户
											//  	这个key值('level')也是数据库里面的权限字段名
	admin_name		: 9,					//	管理员级别   // 或角色  
	priv_list		: 
		{
			// '/OriginalURL'	: { allow: minLevelNumber, 		redirect 	: 	'/RedirectTarget'}
			'/users/add' 			: auth_users_by_level,	
			'/users/del' 			: auth_users_by_level,
			'/uesrs/update' 		: auth_users_by_level,
			'/uesrs/updateAction' 	: auth_users_by_level,
			'/uesrs/addAction' 		: auth_users_by_level,
		}
}

var auth_users_allow_by_role = 	{	//   type = allow 的时候使用白名单，在列表里面的角色可以访问
								// 	 type = deny  的时候使用黑名单，在列表里面的角色不能访问
								type 		: 'allow',
								roles		: ['admin','power_user'] , 
								redirect 	: '/users' 
							};
var auth_users_deny_by_role = 	{	//   type = allow 的时候使用白名单，在列表里面的角色可以访问
								// 	 type = deny  的时候使用黑名单，在列表里面的角色不能访问
								type 		: 'deny',
								roles		: ['author','user','reviewer'] , 
								redirect 	: '/users' 
							};
var authStrategy_02 = {
	priv_type 		: 'role', 				//  type : 'level' 	说明数据库里面用0 - 9 区分用户级别
											//  type : 'role'	说明数据库里面是用角色区分用户
											//  	这个key值('role')也是数据库里面的权限字段名
	admin_name		: 'admin',				//	管理员角色  
	priv_list		: 
		{
			// '/OriginalURL'	: { allow: minLevelNumber, 		redirect 	: 	'/RedirectTarget'}
			'/users/add' 			: auth_users_allow_by_role,	
			'/users/del' 			: auth_users_allow_by_role,
			'/uesrs/update' 		: auth_users_allow_by_role,
			'/uesrs/updateAction' 	: auth_users_allow_by_role,
			'/uesrs/addAction' 		: auth_users_allow_by_role,
			'/users/info'			: auth_users_deny_by_role,
		}
}

function checkAuth(req, res, next){
	req.body.xxxx = 'xxxx';				// 这里可以访问和设定req body的参数值，和执行跳转

	req.cookies.uid;
	req.cookies.user_name;
	req.cookies.auth;
	// 1. 获取当前的URL
	req.originalUrl;
	// 2. 获取当前用户并验证用户端cookie是否合法
	// 
	// 3. 验证用户是否有权限访问当前URL
	// 检查权限
	// 



	next();
}


// 检查cookie内容的完整性（完整性 == 数据和身份合法）
function checkCookieIntegrity(req, res, next){
	var cUsername = req.cookies.user_name
	var cUid 		= req.cookies.uid;
	var cSalt 		= req.cookies.salt;	// 这个salt不是数据库的salt，是用户登录的时候随机生成的salt
	var cCheck 		= req.cookies.check;
	var cUserPriv 	= req.cookies.priv;
	if (cUid == null || cSalt == null || cCheck == null) {
		cUid = cSalt = cCheck = "na";
	};
	console.log("	cUsername 	= " + cUsername);
	console.log("	cUserPriv 	= " + cUserPriv);
	console.log("	cUid 		= " + cUid);
	console.log("	cSalt 		= " + cSalt);
	console.log("	cCheck 		= " + cCheck);
	var new_check = md5(cUid + cSalt + cUid + cUsername  + cUid + cUserPriv);
	if (new_check != cCheck) {
		return false;
	} else {
		return true;
	}
}


module.exports = checkAuth;
